// controllers/courseCategories/deleteCategory.js
const { sql, poolPromise } = require("../../config/db.config");

const deleteCategory = async (req, res) => {
  try {
    const { category_id } = req.params; // L·∫•y category_id t·ª´ params
    const { uid } = req.body; // L·∫•y uid t·ª´ body

    if (!uid) return res.status(400).json({ error: "UID kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });

    // K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu b·∫±ng poolPromise
    const pool = await poolPromise; // ƒê·∫£m b·∫£o r·∫±ng k·∫øt n·ªëi ƒë√£ s·∫µn s√†ng
    const request = new sql.Request(pool); // T·∫°o m·ªôt request t·ª´ pool k·∫øt n·ªëi

    // Truy v·∫•n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng t·ª´ b·∫£ng users
    request.input("uid", sql.NVarChar, uid);
    const roleQuery = await request.query(
      `SELECT role FROM users WHERE uid = @uid` // Truy v·∫•n l·∫•y role c·ªßa ng∆∞·ªùi d√πng t·ª´ b·∫£ng users
    );

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y role
    if (roleQuery.recordset.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    const userRole = roleQuery.recordset[0]?.role; // L·∫•y vai tr√≤ ng∆∞·ªùi d√πng t·ª´ k·∫øt qu·∫£ truy v·∫•n

    // Ki·ªÉm tra vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
    if (userRole !== "admin" && userRole !== "giang_vien") {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a danh m·ª•c" });
    }

    // N·∫øu vai tr√≤ h·ª£p l·ªá, ti·∫øp t·ª•c x√≥a danh m·ª•c
    request.input("category_id", sql.Int, category_id);
    const result = await request.query(
      "DELETE FROM course_categories WHERE category_id = @category_id"
    );

    if (result.rowsAffected[0] === 0) {
      return res
        .status(404)
        .json({ error: "‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c ƒë·ªÉ xo√°" });
    }

    res.status(200).json({ message: "üóëÔ∏è X√≥a danh m·ª•c th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "‚ùå L·ªói xo√° danh m·ª•c: " + err.message });
  }
};

module.exports = deleteCategory;
