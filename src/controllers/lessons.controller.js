// üìÑ src/controllers/lessons.controller.js
const { sql, poolConnect, pool } = require("../config/db.config");

exports.getAllLessons = async (req, res) => {
  const { id } = req.params; // Course ID
  try {
    await poolConnect;
    const request = new sql.Request(pool);
    request.input("courseId", sql.Int, id);
    const result = await request.query(
      "SELECT * FROM lessons WHERE course_id = @courseId"
    );

    if (result.recordset.length === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc cho kh√≥a h·ªçc n√†y" });
    }

    res.status(200).json({
      message: "L·∫•y danh s√°ch b√†i h·ªçc th√†nh c√¥ng",
      data: result.recordset,
    });
  } catch (err) {
    res.status(500).json({ error: "L·ªói server: " + err.message });
  }
};

exports.createLesson = async (req, res) => {
  const { course_id, title, content, duration } = req.body;

  if (!course_id || !title || !content) {
    return res
      .status(400)
      .json({ error: "C√°c tr∆∞·ªùng course_id, title, content l√† b·∫Øt bu·ªôc" });
  }

  try {
    await poolConnect;
    const request = new sql.Request(pool);
    request.input("course_id", sql.Int, course_id);
    request.input("title", sql.NVarChar, title);
    request.input("content", sql.NVarChar, content);
    request.input("duration", sql.Int, duration || 0); // N·∫øu kh√¥ng c√≥ duration, s·∫Ω g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh 0

    await request.query(`
      INSERT INTO lessons (course_id, title, content, duration, created_at, updated_at)
      VALUES (@course_id, @title, @content, @duration, GETDATE(), GETDATE())
    `);

    res.status(201).json({ message: "T·∫°o b√†i h·ªçc m·ªõi th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "L·ªói t·∫°o b√†i h·ªçc: " + err.message });
  }
};

exports.updateLesson = async (req, res) => {
  const { id } = req.params; // Lesson ID
  const { title, content, duration } = req.body;

  try {
    await poolConnect;
    const request = new sql.Request(pool);
    request.input("id", sql.Int, id);
    request.input("title", sql.NVarChar, title);
    request.input("content", sql.NVarChar, content);
    request.input("duration", sql.Int, duration);

    const result = await request.query(`
      UPDATE lessons
      SET title = @title, content = @content, duration = @duration, updated_at = GETDATE()
      WHERE id = @id
    `);

    if (result.rowsAffected[0] === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t b√†i h·ªçc th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t b√†i h·ªçc: " + err.message });
  }
};

exports.deleteLesson = async (req, res) => {
  const { id } = req.params; // Lesson ID

  try {
    await poolConnect;
    const request = new sql.Request(pool);
    request.input("id", sql.Int, id);

    const result = await request.query("DELETE FROM lessons WHERE id = @id");

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc ƒë·ªÉ xo√°" });
    }

    res.status(200).json({ message: "Xo√° b√†i h·ªçc th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "L·ªói xo√° b√†i h·ªçc: " + err.message });
  }
};
